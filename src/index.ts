import { app, BrowserWindow, Menu, MenuItem, globalShortcut, ipcMain } from 'electron';
import * as process from "process";
import * as path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    frame: false,
    show: false,
    minWidth: 500,
    minHeight: 500,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false, // is default value after Electron v5
      contextIsolation: true, // protect against prototype pollution
    },
    icon: './src/img/favicon.png'
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
      .then(() => {
        mainWindow.maximize();
        Menu.setApplicationMenu(null);
        mainWindow.show();
      })
      .catch(e => {
        console.log(e)
      });

  ipcMain.on('close', function(){
    mainWindow.close();
  });
  ipcMain.on('max', function(){
    if (!mainWindow.isMaximized()) {
      mainWindow.maximize();
    } else {
      mainWindow.unmaximize();
    }
  });
  ipcMain.on('min', function(){
    mainWindow.minimize();
  });
  mainWindow.on('maximize',function () {
    mainWindow.webContents.send('maximize');
  });
  mainWindow.on('unmaximize',function () {
    mainWindow.webContents.send('unmaximize');
  });

  if (process.env.DEV_MODE) {
    let p = {
      x: 0,
      y: 0
    };
    const menu = new Menu()
    const menuItem = new MenuItem({
      label: 'Inspect Element',
      click: () => {
        mainWindow.webContents.inspectElement(p.x, p.y);
      }
    });
    menu.append(menuItem);
    ipcMain.on('context_menu', function(e, pos){
      p = pos;
      menu.popup();
    });
    globalShortcut.register('f5', function() {
      mainWindow.reload();
    });
    globalShortcut.register('ctrl+f5', function() {
      app.relaunch();
      app.exit();
    });
    globalShortcut.register('ctrl+i', function() {
      mainWindow.webContents.toggleDevTools();
    });
    mainWindow.webContents.openDevTools();
  }

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
