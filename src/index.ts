import {app, BrowserWindow, Menu} from 'electron';
import * as process from "process";
import registerWindow from "./ipcMain/window";
import registerDevTools from "./ipcMain/devTools";
import registerTextContent from "./ipcMain/textContent";
import registerDatabase, {executeInterestRates, executeStandingOrders} from "./ipcMain/database";
import registerSettings from "./ipcMain/settings";
import {resolve} from "path";
import createDatabase from "./migrations";
import sqlite3 from "sqlite3";

if (process.env.DEV_MODE)
    sqlite3.verbose();
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

app.disableHardwareAcceleration();

const createWindow = async () => {

    await createDatabase();
    await executeStandingOrders();
    await executeInterestRates();

    // TODO DATABASE MIGRATIONS

    // Create the browser window.
    const iconPath = process.platform === 'win32' ? '/img/favicon.ico' : '/img/favicon.png';
    const mainWindow = new BrowserWindow({
        frame: false,
        show: false,
        minWidth: 500,
        minHeight: 500,
        webPreferences: {
          preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
          nodeIntegration: false, // is default value after Electron v5
          contextIsolation: true, // protect against prototype pollution
        },
        icon: resolve(__dirname + iconPath)
    });
    const splash = new BrowserWindow({
        width: 600,
        height: 600,
        transparent: true,
        frame: false,
        alwaysOnTop: true,
        icon: resolve(__dirname + iconPath)
    });
    await splash.loadURL(`file://${__dirname}/splash.html`);
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
          .then(() => {
              mainWindow.maximize();
              if (!process.env.DEV_MODE)
                  Menu.setApplicationMenu(null);
              registerWindow(mainWindow);
              registerTextContent();
              registerDatabase();
              registerSettings();
              if (process.env.DEV_MODE) {
                  registerDevTools(mainWindow);
              }
          })
          .catch(e => {
            console.log(e);
          });

    mainWindow.once('ready-to-show', () => {
        splash.destroy();
        mainWindow.show();
    })

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow().then();
  }
});